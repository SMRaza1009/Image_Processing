#Image registration is one of the common tasks performed by microscopists
# working with 3D data sets. There are excellent algorithms available for 
# registration. Homography allows image registration by using descriptors 
# of keypoints generated by SIFT, SURF, ORB or similar keypoint descriptors.


# 1. Import 2 images
# 2. convert into gray scale
# 3. Initiate the ORB detector
# 4. Find the key points and describe them
# 5. Match keypoints - Brute force matcher
# 6. RANSAC (reject the bad keypoints)
# 7. Register two images (use homology)


import numpy as np
import cv2 
from matplotlib import pyplot as plt

img1 = cv2.imread('E:\Research\IMG Processing\Image Processing using Python/monkey_distorted.jpg') # Image to be registered
img2 = cv2.imread('E:\Research\IMG Processing\Image Processing using Python/monkey.jpg') # Reference image
img2 = cv2.resize(img2, (220,330))

gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)
gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)

orb = cv2.ORB_create(50)

kp1, des1 = orb.detectAndCompute(gray1, None)
kp2, des2 = orb.detectAndCompute(gray2, None)

matcher = cv2.DescriptorMatcher_create(cv2.DescriptorMatcher_BRUTEFORCE_HAMMING)

matches = matcher.match(des1, des2, None)

matches = sorted(matches, key = lambda x:x.distance)

points1 = np.zeros((len(matches),2), dtype=np.float32)
points2 = np.zeros((len(matches),2), dtype=np.float32)

for i, match in enumerate(matches):
    points1[i, :] = kp1[match.queryIdx].pt
    points2[i, :] = kp2[match.trainIdx].pt
    
h, mask = cv2.findHomography(points1, points2, cv2.RANSAC) 

height, width, channels = img2.shape

img1Reg = cv2.warpPerspective(img1, h, (width, height))   
img3 = cv2.drawMatches(img1, kp1, img2, kp2, matches[:10], None)

cv2.imshow('Key Points Matches', img3) 
cv2.imshow('Registered Image', img1Reg) 
    
#img3 = cv2.drawMatches(gray1, kp1, gray2, kp2, matches[:10], None)



# cv2.imshow('Matches', img3)

# img3 = cv2.drawKeypoints(gray1, kp1, None, flags=None)
# img4 = cv2.drawKeypoints(gray2, kp2, None, flags=None)


# cv2.imshow('Img-3', img3)
# cv2.imshow('Img-4', img4)
cv2.waitKey(0)

